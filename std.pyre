# Standard library utils

import "fcntl"

define STDOUT 1
define SYSCALL_READ         0
define SYSCALL_WRITE        1
define SYSCALL_OPEN         2
define SYSCALL_CLOSE        3

# Prints a string
procedure print length address -- in
    length address STDOUT SYSCALL_WRITE syscall3 drop
end

macro write  # length memory fd
    SYSCALL_WRITE syscall3
end

# Open a file
macro open
    where filename in
    0 O_WRONLY filename SYSCALL_OPEN syscall3
    end
end

# Read a file
macro read
    SYSCALL_READ syscall3
end

# Close a file
macro close
    where file_descriptor in
        file_descriptor SYSCALL_CLOSE syscall1
    end
end


# Converts a decimal number into a character
# 0 to '0'
# 1 to '1'
# and so on
macro num2char  # num
    48 +
end

macro strlen  # memory
    0  # length
    where address length in
        while address 0 != do
            address 1 + !address
            length 1 + !length
        end
    end
end

procedure putchar char -- in
    @ 1 swap STDOUT SYSCALL_WRITE syscall3
    drop  # drop syscall result
end

# macro strcmp
# # length1 string1 length2 string2
#     0  # i
#     where l1 s1 l2 s2 i in
#         l1 l2 != if
#             drop drop drop drop drop
#             0  # False
#         else
#             1 where are_equal in
#             while
#                 s1 i + [] putchar
#                 '\n' putchar
#                 s2 i + [] putchar
#                 '\n' putchar
#                 i num2char putchar
#                 '\n' putchar
#                 '\n' putchar
#                 s1 i + [] 0 !=
#                 s2 i + [] 0 != *
#                 are_equal *
#             do
#                 s1 i + []
#                 s2 i + [] = !are_equal
#                 i 1 + !i
#             end
#             are_equal !l1
#             end
#             drop drop drop drop drop
#         end
#     end
# end

procedure show_uint num -- in
    0  # digits
    where digits in
        if num 0 = do  # If it's 0 just print 0
            num num2char putchar
        else
            while num 0 > do
                num 10 %  # last digit
                digits++
                num 10 / !num # num /= 10
            end
            # ... c b a digits
            while digits 0 > do
                num2char putchar
                digits--
            end
        end
    end
    drop
    # '\n' putchar
end

macro endl
    '\n' putchar
end

macro peek
    dup show_uint
end


procedure set_mem c a b -- in
    while a b < do
        c !memory:uint8[a]
        a++
    end
end


procedure copy_mem dest start stop -- in
    2dup + swap drop  # Replace len with source + len
    while start stop < do
        memory:uint8[start] !memory:uint8[dest]
        start++
        dest++
    end
end


procedure print_mem a b -- in
    while a b < do
        memory:uint8[a] num2char putchar
        a++
    end
    '\n' putchar
end
