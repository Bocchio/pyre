# Standard library utils

import "fcntl"

define STDOUT 1
define SYSCALL_READ         0
define SYSCALL_WRITE        1
define SYSCALL_OPEN         2
define SYSCALL_CLOSE        3

# Prints a string
macro print  # length memory
    STDOUT SYSCALL_WRITE syscall3
end

macro write  # length memory fd
    SYSCALL_WRITE syscall3
end

# Open a file
macro open
    where filename in
    0 O_WRONLY filename SYSCALL_OPEN syscall3
    end
end

# Read a file
macro read
    SYSCALL_READ syscall3
end

# Close a file
macro close
    where file_descriptor in
        file_descriptor SYSCALL_CLOSE syscall1
    end
end


# Converts a decimal number into a character
# 0 to '0'
# 1 to '1'
# and so on
macro num2char  # num
    48 +
end

macro strlen  # memory
    0  # length
    where address length in
        while address 0 != do
            address 1 + !address
            length 1 + !length
        end
    end
end

macro putchar  # char
    @ 1 swap STDOUT SYSCALL_WRITE syscall3 drop
end

macro strcmp
# length1 string1 length2 string2
    0  # i
    where l1 s1 l2 s2 i in
        l1 l2 != if
            drop drop drop drop drop
            0  # False
        else
            1 where are_equal in
            while
                s1 i + [] putchar
                '\n' putchar
                s2 i + [] putchar
                '\n' putchar
                i num2char putchar
                '\n' putchar
                '\n' putchar
                s1 i + [] 0 !=
                s2 i + [] 0 != *
                are_equal *
            do
                s1 i + []
                s2 i + [] = !are_equal
                i 1 + !i
            end
            are_equal !l1
            end
            drop drop drop drop drop
        end
    end
end

macro show_uint  # num
    0  # digits
    where num digits in
    num 0 = if  # If it's 0 just print 0
        num num2char putchar
    else
        while num 0 > do
            num 10 %  # last digit
            digits 1 + !digits # digits++
            num 10 / !num # num /= 10
        end
        # ... c b a digits
        while digits 0 > do
            num2char putchar
            digits 1 - !digits
        end
    end
    end
    drop drop
    '\n' putchar
end

macro peek
    dup show_uint
end

macro get_uint8  # i
    memory swap + load  # memory[i]
end

macro set_uint8  # i -- value
    memory rot3 +  # value -- memory + i
    swap store  # memory[i] <- value
end

macro set_mem  # c a b
    while 2dup < do
        # b c a
        rot3 rot3 2dup swap set_uint8
        # c (a+1) b
        1 + rot3
    end
end

macro copy_mem  # dest source len
    # d s l
    2dup + swap drop
    # d s L s L
    while 2dup < do
        rot3 rot3           # L d s
        dup get_uint8       # L d s [s]
        rot3 dup rot3       # L s d d [s]
        set_uint8           # L s d
        1 + swap 1 + rot3   # (d+1) (s+1) L
    end drop drop drop
end

macro print_mem  # a b
    while 2dup < do
        swap # b a
        dup get_uint8 48 + putchar  # print 48 + [a]
        1 + swap
    end drop drop
    '\n' putchar
end
